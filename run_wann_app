#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
run_wann_app_usage() {
  if [[ -n $long_usage ]]; then
    printf "run_wann_app - Cli to run wannier app in docker\n"
    echo

  else
    printf "run_wann_app - Cli to run wannier app in docker\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  run_wann_app COMMAND\n"
  printf "  run_wann_app [COMMAND] --help | -h\n"
  printf "  run_wann_app --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   List the available apps\n" "list "
  printf "  %s   Start the application. By default using the latest version.\n" "start"
  printf "  %s   Stop the application\n" "stop "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
run_wann_app_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "run_wann_app list - List the available apps\n"
    echo

  else
    printf "run_wann_app list - List the available apps\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  run_wann_app list\n"
  printf "  run_wann_app list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
run_wann_app_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "run_wann_app start - Start the application. By default using the latest version.\n"
    echo

  else
    printf "run_wann_app start - Start the application. By default using the latest version.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  run_wann_app start [OPTIONS]\n"
  printf "  run_wann_app start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--version, -v VERSION"
    printf "    Select app version\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  run_wann_app start\n"
    printf "  run_wann_app start -v 0.9.3\n"
    echo

  fi
}

# :command.usage
run_wann_app_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "run_wann_app stop - Stop the application\n"
    echo

  else
    printf "run_wann_app stop - Stop the application\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  run_wann_app stop\n"
  printf "  run_wann_app stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/get_info.sh
get_app_info() {
	user=$(whoami)
	user_id=$(id -u)
	port=$((8000 + user_id))
	app_name=wann-app-$user
	container_id=$(docker ps -a | grep "${app_name}" | awk -F'  ' '{print $1}')
	status=$(docker ps -a | grep "${container_id}" | awk -F'  ' '{print $5}')
}

# :command.command_functions
# :command.function
run_wann_app_list_command() {
  # src/list_command.sh
  #echo "# this file is located in 'src/list_command.sh'"
  #echo "# code for 'run_wann_app list' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args
  echo "Versions"
  docker images | grep wannier-app | awk '{print $2}'

}

# :command.function
run_wann_app_start_command() {
  # src/start_command.sh
  #echo "# this file is located in 'src/start_command.sh'"
  #echo "# code for 'run_wann_app start' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args
  get_app_info
  ava_versions=$(docker images | grep wannier-app | awk '{print $2}')
  select_version=${args[--version]}

  if [[ -z "$container_id" ]]; then
  	if [[ -z "$select_version" ]]; then
  		select_version=$(echo "$ava_versions" | head -n 1)
  	fi
  	if [[ "$ava_versions" =~ $select_version ]]; then
  		docker run -d -p "$port":8050 -v "$HOME":/data --name "$app_name" wannier-app:$select_version >/dev/null
  		echo "A docker container named $app_name has been created."
  	else
  		echo "No such version!"
  		exit 1
  	fi
  else
  	if [[ $status =~ "Exited" ]]; then
  		docker start "$container_id"
  		echo "Container $app_name has been started."
  	else
  		echo "Container $app_name is already running."
  	fi
  fi

}

# :command.function
run_wann_app_stop_command() {
  # src/stop_command.sh
  #echo "# this file is located in 'src/stop_command.sh'"
  #echo "# code for 'run_wann_app stop' goes here"
  #echo "# you can edit it freely and regenerate (it will not be overwritten)"
  #inspect_args
  get_app_info

  if [[ $status =~ "Up" ]]; then
  	docker stop "$container_id" >/dev/null
  	echo "Container $app_name has been stopped."
  else
  	echo "Container $app_name is not running."
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        run_wann_app_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list)
      action="list"
      shift
      run_wann_app_list_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      run_wann_app_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      run_wann_app_stop_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      run_wann_app_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
run_wann_app_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        run_wann_app_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
run_wann_app_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        run_wann_app_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --version | -v)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--version']="$2"
          shift
          shift
        else
          printf "%s\n" "--version requires an argument: --version, -v VERSION" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
run_wann_app_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        run_wann_app_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.9.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "list") run_wann_app_list_command ;;
    "start") run_wann_app_start_command ;;
    "stop") run_wann_app_stop_command ;;
  esac
}

initialize
run "$@"
